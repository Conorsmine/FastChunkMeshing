package com.conorsmine.net.fastchunkmeshing.util;

public final class BitUtil {

    private static final long X_ONE_MASK = 0xFF00000000000000L, X_TWO_MASK = 0x00000000FF000000L;
    private static final long Y_ONE_MASK = 0x00FFFF0000000000L, Y_TWO_MASK = 0x0000000000FFFF00L;
    private static final long Z_ONE_MASK = 0x000000FF00000000L, Z_TWO_MASK = 0x00000000000000FFL;

    /**
     * <p>Compresses the coords, x1, x2, y1, y2, z1 & z2 into a single long.</p>
     * <p>Data placement:</p>
     * <pre>
     * 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
     * ^--x1--^ ^------y1-------^ ^--z1--^ ^--x2--^ ^------y2-------^ ^--z2--^
     * </pre>
     * @return Data compressed into a long
     */
    public static long compressCoordsToLong(byte x1, short y1, byte z1, byte x2, short y2, byte z2) {
        long data = 0;
        data = (data | x1) << 16;
        data = (data | y1 & 0xFFFFL) << 8;
        data = (data | z1) << 8;

        data = (data | x2) << 16;
        data = (data | y2 & 0xFFFFL) << 8;
        data |= z2;
        return data;
    }

    /**
     * <p>Data is uncompressed in the following way:</p>
     * <pre>
     * Value    Index
     * x1       0
     * y1       1
     * z1       2
     * x2       3
     * y2       4
     * z2       5
     * </pre>
     * @param chunkCoordsData long generated by {@link BitUtil#compressCoordsToLong(byte, short, byte, byte, short, byte)}
     * @return Array of values corresponding to the data in the long
     */
    public static int[] uncompressChunkCoords(final long chunkCoordsData) {
        final int[] data = new int[6];
        data[0] = (int) (chunkCoordsData >> 56);
        data[1] = (int) ((short) ((chunkCoordsData & Y_ONE_MASK) >> 40));
        data[2] = (int) ((chunkCoordsData & Z_ONE_MASK) >> 32);

        data[3] = (int) ((chunkCoordsData & X_TWO_MASK) >> 24);
        data[4] = (int) ((short) ((chunkCoordsData & Y_TWO_MASK) >> 8));
        data[5] = (int) ((chunkCoordsData & Z_TWO_MASK));
        return data;
    }
}
